<script>
require(['jquery'], function($) {
    $(document).ready(function() {
        var clientId = "<?= $block->escapeJs($block->getClientId()) ?>"; // Fetch the client ID safely

        async function initializeGSSDK() {
            var contextData = {};
            var pageType = "";
            var cart_items = <?= json_encode($block->getCartItems()) ?>;  // Get cart items as JSON

            if ("<?= $block->isHomePage() ?>") {
                pageType = 'home';
                contextData = { pageType: pageType };
            } else if ("<?= $block->isProductPage() ?>") {
                pageType = 'product_detail';
                pageType = 'product_detail';
                var productId = "<?= $block->getCurrentProductId() ?>";  // This will be the configurable ID if applicable
                var productType = "<?= $block->getCurrentProductType() ?>";

                contextData = {
                    pageType: pageType,
                    product_id: productId,  // Only the configurable ID is used here if available
                    product_type: productType,
                    provider: 'Magento_V2'
                };

                setTimeout(() => {
                    
                }, 2 * 1000);
            } else if ("<?= $block->isCartPage() ?>") {
                pageType = 'cart';
                contextData = { pageType: pageType, cart_items};
            } else if ("<?= $block->isCheckoutPage() ?>") {
                pageType = 'checkout';
                contextData = { pageType: pageType, cart_items};
            } else if ("<?= $block->isSearchResultsPage() ?>") {
                pageType = 'search';
                contextData = { pageType: pageType};
            } else {
                pageType = 'other';
                contextData = { pageType: pageType};
            }

            window.gsSDK = await new window.GSSDK.default(clientId, {
                provider: 'Magento_V2',
                context: contextData
            });

            await fetchTokenAndCompare();

            try {
                await new Promise(resolve => setTimeout(resolve, 2000));

                if (window.gsConfig?.options.context.pageType === 'product_detail') {
                    const productId = window.gsConfig.options.context.product_id;
                    if (productId) {
                        await window.gsSDK.addInteraction({ event: "view", item: productId });
                    }
                }
            } catch (error) {
                console.error('Error in tracking script:', error);
            }
            
        }

        var gsSDKScript = document.createElement('script');
        gsSDKScript.src = 'https://sdk.gopersonal.ai/gs-sdk.js';
        gsSDKScript.onload = initializeGSSDK;
        document.head.appendChild(gsSDKScript);

        async function fetchTokenAndCompare() {
            try {
                const currentToken = window.gsSDK.getCurrentSession().token;
                // Fetch the token, customer ID, and email from the Magento API
                const response = await fetch(window.location.origin + '/gopersonal/api/gettoken');
                const data = await response.json();

                // Compare the current token with the one from the server
                if (currentToken != data.token) {
                    // If the token is different, update it on the server
                    await fetch(`${window.location.origin}/gopersonal/api/storetoken?token=${encodeURIComponent(currentToken)}`, {
                        method: 'GET'
                    });
                }

                // Check if user is logged in and has valid data, then perform login on gsSDK
                if (data.customer_id && data.customer_email) {
                    window.gsSDK.login(data.customer_id, {
                        email: data.customer_email,
                        param_updateCartFromCustomer: true
                    }).then(() => {
                        console.log('Logged in successfully:', data.customer_email);
                    }).catch(error => {
                        console.error('Error during SDK login:', error);
                    });
                }
            } catch (error) {
                console.error('Error fetching or updating token:', error);
            }
        }
    });
});
</script>
